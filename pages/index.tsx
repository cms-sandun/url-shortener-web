import { Alert, AlertIcon, Button, Flex, Heading, Input, Link, useToast } from '@chakra-ui/react'
import Head from 'next/head'
import { FormEvent, useState } from 'react'
import { shortenUrl } from '../api/url-shortner'
import styles from '../styles/Home.module.css'
import UrlEntiryProps from '../types/url-entity.type'

export default function Home() {

  const [urls, setUrls] = useState<UrlEntiryProps[]>([])
  const [error, setError] = useState<string | null>(null)
  const toast = useToast()

  const isValidHttpUrl = (url: string) => {
    let currentUrl;
    try {
      currentUrl = new URL(url);
    } catch (_) {
      return false;
    }
    return currentUrl.protocol === "http:" || currentUrl.protocol === "https:";
  }

  const onSubmitHandler = async (e: FormEvent<HTMLFormElement>) => {
    try {
      e.preventDefault()
      const currentUrl = (e.currentTarget.elements.namedItem('inputLongUrl') as HTMLInputElement).value
      if (!isValidHttpUrl(currentUrl)) {
        setError("Invalid URL provided. Please follow this format. http(s)://www.example.com")
        return
      }

      const response = await shortenUrl(currentUrl)
      setUrls([...urls, response as UrlEntiryProps])
      setError(null)
    } catch (error: unknown) {
      if (error instanceof Error) {
        setError(error.message)
      }
    }
  }

  const onCopyHandler = async (text: string) => {
    if (!navigator?.clipboard) {
      console.warn('Clipboard not supported')
      return false
    }
    try {
      const baseUrl = process.env.NEXT_PUBLIC_API_URL
      await navigator.clipboard.writeText(`${baseUrl}/${text}`)
      toast({
        title: 'Copied!',
        description: "Copied to clipboard",
        status: 'success',
        duration: 5000,
        isClosable: true,
      })
      return true
    } catch (error) {
      console.warn('Copy failed', error)
      return false
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>

        <Heading className={styles.title} color='white'>
          Welcome to Url Shortner
        </Heading>

        <form onSubmit={onSubmitHandler} data-testid='form'>

          {error && <Alert data-testid='errorAlert' status='error' mt={5}>
            <AlertIcon />
            {error}
          </Alert>}

          <Flex flexDirection={'row'} mt={10}>
            <Input color={'white'} data-testid='inputLongUrl' name='inputLongUrl' size={'lg'} w='600px' type="url" required placeholder='Example : http(s)://www.example.com'></Input>
            <Button borderColor={'white'} data-testid='submitButton' size={'lg'} ml={3} type='submit' >Shorten</Button>
          </Flex>
        </form>



        <Flex mt={10} w='100%' alignItems={'center'} flexDirection={'column'} data-testid='urlHistoryList' >
          {urls && urls.map((url: UrlEntiryProps, i: number) => (
            <Flex key={i} justifyContent='space-between' width={'55%'} p={2} >
              <Flex>
                <Link href={url.originalUrl} isExternal color={'white'}>
                  {url.originalUrl}
                </Link>
              </Flex>
              <Flex>
                <Link href={`${process.env.NEXT_PUBLIC_API_URL}/${url.shortUrlKey}`} isExternal color={'white'}>
                  {`${process.env.NEXT_PUBLIC_API_URL}/${url.shortUrlKey}`}
                </Link>
                <Button ml={3} size={'xs'} onClick={() => onCopyHandler(`${url.shortUrlKey}`)}>Copy</Button>
              </Flex>
            </Flex>))}
        </Flex>
      </main>
    </div >
  )
}
